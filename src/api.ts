import type { PriceListResult } from '@iak-id/iak-api-server-js'
import supabase from 'client'
import {
	FirstPage,
	HttpInternalServerError,
	HttpNotFound,
	ProductListEndpoint
} from 'constant'
import fetch from 'cross-fetch'
import LoadMoreError from 'errors/LoadMoreError'
import NotFoundError from 'errors/NotFoundError'
// eslint-disable-next-line unicorn/prefer-node-protocol
import { promises as fs } from 'fs'
// eslint-disable-next-line unicorn/prefer-node-protocol
import path from 'path'

export interface IMetaImage {
	filename: string
	hash: string
	sources: string[]
}

export interface IBlogListItem {
	title: string
	description: string
	publishedAt: Date
	thumbnail: string
	label: string[]
	commentId: number
	readTime: number
	link: string
}

export interface IBaseData {
	publishedAt?: string
	body: string
}

export interface IBlogArticle {
	attributes: Omit<IBlogListItem, 'link'> & {
		commentId: number
	}
	body: string
}

export interface IBlogArticleDto {
	attributes: Omit<IBlogListItem, 'publishedAt'> & {
		publishedAt: string
	}
	body: string
}

export interface IProjectList {
	name: string
	description: string
	tags: string[]
	pinned: boolean
	thumbnail: string
	demoUrl: string
	createdAt: Date
	sourceUrl: string
	link: string
}

export interface IProject {
	attributes: Omit<IProjectList, 'link'>
	body: string
}
// generated by quicktype
export interface IConfig {
	name: string
	birthdate: Date
	avatar: string
	background: string
	jargon: string
	github: string
	repository: string
	quote: string
	email: string
	phone: string
	fullName: string
	contact: Contact
	skills: IConfigSkill[]
	about: About
}

export interface About {
	intro: string
	jobExperiences: JobExperience[]
	educations: Education[]
	languages: Language[]
	hobby: string[]
	skills: AboutSkill[]
	tools: Tool[]
}

export interface Education {
	type: string
	name: string
	startAt: Date
	graduationAt: Date
	location: string
	description: string
}

export interface JobExperience {
	company: string
	location: string
	position: string
	startAt: Date
	endAt: Date
	description: string
}

export interface Language {
	name: string
	level: string
}

export interface AboutSkill {
	icon: string
	group?: string
	name: string
	level: number
}

export interface Tool {
	icon: string
	name: string
	hasColor?: boolean
}

export interface Contact {
	address: string
	phone: string
	email: string
	github: string
	instagram: string
	linkedin: string
}

export interface IConfigSkill {
	name: string
	techs: string[]
}

// end generated type
export enum Subject {
	JobOffer = 'JobOffer',
	Project = 'Project',
	Freelance = 'Freelance'
}

export interface ScheduleData {
	email: string
	phone: string
	fullname: string
	company?: string
	subject: Subject
	message: string
	meet_date: string
	duration: number
}
export interface Schedule extends ScheduleData {
	id: string
	created_at: string
}

export interface IPriceListApiResult {
	result: PriceListResult
}

export async function getConfig(language: string): Promise<IConfig> {
	const result = await fetch(`/_data/${language}/config.json`)
	if (result.status === HttpNotFound) {
		throw new NotFoundError('page not found')
	}
	const config = (await result.json()) as IConfig

	return config
}

export async function getPinnedProjects(
	language: string
): Promise<IProjectList[]> {
	const result = await fetch(`/_data/${language}/projects/index-pinned.json`)
	if (result.status === HttpNotFound) {
		throw new NotFoundError("requested file doesn't exist")
	}
	const projectList: IProjectList[] = (await result.json()) as IProjectList[]
	return projectList.map(data => ({
		...data,
		createdAt: new Date(String(data.createdAt))
	}))
}

export async function getProductList(): Promise<PriceListResult> {
	const result = await fetch(ProductListEndpoint)

	if (result.status === HttpInternalServerError) {
		throw new Error('failed to load data')
	}

	const products = (await result.json()) as IPriceListApiResult

	return products.result
}

export async function getProjectListPaged(
	page: number,
	language: string
): Promise<IProjectList[]> {
	const result = await fetch(
		`/_data/${language}/projects/index-page-${page}.json`
	)

	if (result.status === HttpNotFound && page > FirstPage) {
		throw new LoadMoreError('Project not found')
	}

	const projectList: IProjectList[] = (await result.json()) as IProjectList[]
	return projectList.map(data => ({
		...data,
		createdAt: new Date(String(data.createdAt))
	}))
}

export async function getArticleList(
	language: string
): Promise<IBlogListItem[]> {
	const articleList: IBlogListItem[] = []
	const jsonDirectory = path.join(
		process.cwd(),
		`/public/_data/${language}/articles`
	)
	let page = FirstPage

	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	while (true) {
		try {
			const indexFilePath = `${jsonDirectory}/index-page-${page}.json`
			console.log('index', indexFilePath)

			// eslint-disable-next-line no-await-in-loop
			const result = await fs.readFile(indexFilePath)

			const dataResult = JSON.parse(result.toString('utf8')) as IBlogListItem[]

			for (const item of dataResult) {
				articleList.push({
					...item,
					publishedAt: new Date(String(item.publishedAt))
				})
			}

			// articleList.push(...dataResult)
			// eslint-disable-next-line @typescript-eslint/no-magic-numbers
			page += 1
		} catch {
			break
		}
	}

	return articleList
}

export async function getNodeArticleDetail(
	slug: string,
	language: string
): Promise<IBlogArticleDto> {
	const jsonDirectory = path.join(
		process.cwd(),
		`/public/_data/${language}/articles`
	)
	const result = await fs.readFile(`${jsonDirectory}/${slug}.json`)
	const article = JSON.parse(result.toString('utf8')) as IBlogArticleDto

	return article
}

/**
 * Retrieves a list of projects based on the specified language.
 *
 * @param {string} language - The language to filter the projects by.
 * @return {Promise<IProjectList[]>} - A promise that resolves to an array of project lists.
 */
export async function getProjectList(
	language: string
): Promise<IProjectList[]> {
	const projectList: IProjectList[] = []
	const jsonDirectory = path.join(
		process.cwd(),
		`/public/_data/${language}/projects`
	)
	let page = FirstPage

	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	while (true) {
		try {
			const indexFilePath = `${jsonDirectory}/index-page-${page}.json`
			console.log('index', indexFilePath)

			// eslint-disable-next-line no-await-in-loop
			const result = await fs.readFile(indexFilePath)

			const dataResult = JSON.parse(result.toString('utf8')) as IProjectList[]

			projectList.push(...dataResult)
			// eslint-disable-next-line @typescript-eslint/no-magic-numbers
			page += 1
		} catch {
			break
		}
	}

	return projectList
}

/**
 * Retrieves the project details for a specific slug and language.
 *
 * @param {string} slug - The slug of the project.
 * @param {string} language - The language of the project.
 * @return {Promise<IProject>} A promise that resolves to the project details.
 */
export async function getNodeProjectDetail(
	slug: string,
	language: string
): Promise<IProject> {
	const jsonDirectory = path.join(
		process.cwd(),
		`/public/_data/${language}/projects`
	)
	const result = await fs.readFile(`${jsonDirectory}/${slug}.json`)
	const project = JSON.parse(result.toString('utf8')) as IProject

	return {
		attributes: project.attributes,
		body: project.body
	}
}

export async function getBlogListPaged(
	page: number,
	language: string
): Promise<IBlogListItem[]> {
	const result = await fetch(
		`/_data/${language}/articles/index-page-${page}.json`
	)

	if (result.status === HttpNotFound && page > FirstPage) {
		throw new LoadMoreError('Articles not found')
	}

	const blogList: IBlogListItem[] = (await result.json()) as IBlogListItem[]
	// eslint-disable-next-line @typescript-eslint/no-unsafe-return
	return blogList.map(data => ({
		...data,
		// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
		publishedAt: new Date(String(data.publishedAt))
	}))
}

export async function getBlogArticle(
	slug: string,
	language: string
): Promise<IBlogArticle> {
	const result = await fetch(`/_data/${language}/articles/${slug}.json`)

	if (result.status === HttpNotFound) {
		throw new Error('Article not found')
	}

	const article: IBlogArticle = (await result.json()) as IBlogArticle
	return {
		attributes: {
			...article.attributes,
			publishedAt: new Date(String(article.attributes.publishedAt))
		},
		body: article.body
	}
}

export async function getProjectDetail(
	slug: string,
	language: string
): Promise<IProject> {
	const result = await fetch(`/_data/${language}/projects/${slug}.json`)

	if (result.status === HttpNotFound) {
		throw new Error('Article not found')
	}

	const project: IProject = (await result.json()) as IProject
	return {
		attributes: project.attributes,
		body: project.body
	}
}

export async function addSchedule(schedule: ScheduleData): Promise<Schedule> {
	const { data, error } = await supabase.from<Schedule>('schedules').insert([
		{
			company: schedule.company,
			email: schedule.email,
			fullname: schedule.fullname,
			message: schedule.message,
			meet_date: schedule.meet_date,
			phone: schedule.phone,
			duration: schedule.duration,
			subject: schedule.subject
		}
	])
	if (error) {
		console.log(error)
		throw new Error(error.message)
	}

	return data[0]
}
